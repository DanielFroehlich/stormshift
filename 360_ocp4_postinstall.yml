---


# ------------------------------------------------------------------------------
# This customizes the OpenShift V4 Installation
# Heavily inspired / re-used from
# https://github.com/RedHat-EMEA-SSA-Team/hetzner-ocp4/blob/master/ansible/roles/openshift-4-cluster/tasks/post-install.yml

- name: Configure OpenShift4 from support node
  hosts: "{{layer3_ocp_name}}support.stormshift.coe.muc.redhat.com"
  gather_facts: false
  vars_files:
    - cfg/secrets.yml
    - cfg/stormshift.yml
  vars:
    storage_nfs_target_namespace: openshift-nfs-provisioner
    openshift_install_dir: /root/ocp4install
  tasks:

# ------------------------------------------------------------------------------
# Install Certs to Ingress Operator
# ------------------------------------------------------------------------------

    - name: Create secret with certificates
      tags: certs
      when: sysctx_certs_path is defined
      k8s:
        state: present
        kubeconfig: "/root/ocp4install/auth/kubeconfig"
        definition:
          apiVersion: v1
          kind: Secret
          data:
            tls.crt: "{{  lookup('file', '{{sysctx_certs_path}}/stormshift_fullchain.crt', rstrip=false) | b64encode }}"
            tls.key: "{{  lookup('file', '{{sysctx_certs_path}}/stormshift.key', rstrip=false)  | b64encode }}"
          metadata:
            name: stormshift-router-certs
            namespace: openshift-ingress
          type: kubernetes.io/tls

    - name: Patch ingresscontroller/default
      tags: certs
      when: sysctx_certs_path is defined
      k8s:
        state: present
        kubeconfig: "/root/ocp4install/auth/kubeconfig"
        merge_type: merge
        definition:
          apiVersion: operator.openshift.io/v1
          kind: IngressController
          metadata:
            name: default
            namespace: openshift-ingress-operator
          spec:
            defaultCertificate:
              name: stormshift-router-certs

# ------------------------------------------------------------------------------
# Configure authentication
# ------------------------------------------------------------------------------
    - set_fact:
        identity_roviders: "[]"
      tags: auth

    - name: Create htpasswd file
      tags: auth,htpasswd
      local_action:
        module: htpasswd
        path: /tmp/htpasswd.{{layer3_ocp_name}}
        name: "{{item}}"
        password: "{{secret_password}}"
      with_items: "{{layer3_ocp_admin_users}}"
      register: htpasswd


    - name: Create htpasswd secret
      tags: auth,htpasswd
      k8s:
        state: present
        kubeconfig: "/root/ocp4install/auth/kubeconfig"
        definition:
          apiVersion: v1
          data:
            htpasswd: "{{ lookup('file', '/tmp/htpasswd.{{layer3_ocp_name}}') | b64encode }}"
          kind: Secret
          metadata:
            name: htpasswd
            namespace: openshift-config
          type: Opaque
      when: htpasswd is changed

    - name: Create htpasswd identity provider template
      tags: auth,htpasswd
      set_fact:
        htpasswd_idp:
          htpasswd:
            fileData:
              name: htpasswd
          mappingMethod: claim
          name: Local
          type: HTPasswd

    - name: Push htpasswd_idp to identity_providers
      tags: auth,htpasswd
      set_fact:
        identity_roviders: "{{ identity_roviders }} + [ {{ htpasswd_idp }} ]"

    - name: Create google secret secret
      tags: auth,google
      k8s:
        state: present
        kubeconfig: "/root/ocp4install/auth/kubeconfig"
        definition:
          apiVersion: v1
          data:
            clientSecret: "{{ sysctx_google_auth_client_secret | b64encode }}"
          kind: Secret
          metadata:
            name: google-secret
            namespace: openshift-config
          type: Opaque

    - name: Create google identity provider template
      tags: auth,google
      set_fact:
        redhatsso_idp:
          google:
            clientID: "{{ sysctx_google_auth_client_id }}"
            clientSecret:
              name: google-secret
            hostedDomain: redhat.com
          mappingMethod: claim
          name: RedHatInternalSSO
          type: Google

    - name: Push google to identpty_providers
      tags: auth,google
      set_fact:
        identity_roviders: "{{ identity_roviders }} + [ {{ redhatsso_idp }} ]"

    - name: Configure identity providers
      tags: auth
      k8s:
        state: present
        kubeconfig: "/root/ocp4install/auth/kubeconfig"
        definition:
            apiVersion: config.openshift.io/v1
            kind: OAuth
            metadata:
              name: cluster
            spec:
              identityProviders: "{{ identity_roviders }}"

    - name: Add cluster-admin role to admins
      tags: auth
      k8s:
        state: present
        kubeconfig: "/root/ocp4install/auth/kubeconfig"
        definition:
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: "{{ item }}-cluster-admin"
          subjects:
          - apiGroup: rbac.authorization.k8s.io
            kind: User
            name: "{{ item }}"
          roleRef:
            kind: ClusterRole
            name: "cluster-admin"
      with_items: "{{layer3_ocp_admin_users}}"

# ------------------------------------------------------------------------------
# Create DYNAMIC NFS nfs-client-provisioner until OCS is availabl
# Stolen from:
# https://github.com/RedHat-EMEA-SSA-Team/hetzner-ocp4/blob/master/ansible/roles/openshift-4-cluster/tasks/post-install-storage-nfs.yml
# ------------------------------------------------------------------------------
    - name: Create Namespace
      tags: nfsprov
      k8s:
        state: present
        kubeconfig: "{{ openshift_install_dir }}/auth/kubeconfig"
        definition:
          kind: Namespace
          apiVersion: v1
          metadata:
            name: "{{ storage_nfs_target_namespace }}"

    - name: Create ServiceAccount
      tags: nfsprov
      k8s:
        state: present
        kubeconfig: "{{ openshift_install_dir }}/auth/kubeconfig"
        definition:
          kind: ServiceAccount
          apiVersion: v1
          metadata:
            name: nfs-client-provisioner
            namespace: "{{ storage_nfs_target_namespace }}"

    - name: Create ClusteRole nfs-client-provisioner-runner
      tags: nfsprov
      k8s:
        state: present
        kubeconfig: "{{ openshift_install_dir }}/auth/kubeconfig"
        definition:
          kind: ClusterRole
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: nfs-client-provisioner-runner
          rules:
            - apiGroups: [""]
              resources: ["persistentvolumes"]
              verbs: ["get", "list", "watch", "create", "delete"]
            - apiGroups: [""]
              resources: ["persistentvolumeclaims"]
              verbs: ["get", "list", "watch", "update"]
            - apiGroups: ["storage.k8s.io"]
              resources: ["storageclasses"]
              verbs: ["get", "list", "watch"]
            - apiGroups: [""]
              resources: ["events"]
              verbs: ["create", "update", "patch"]

    - name: Create ClusteRoleBinding nfs-client-provisioner-runner <-> nfs-client-provisioner
      tags: nfsprov
      k8s:
        state: present
        kubeconfig: "{{ openshift_install_dir }}/auth/kubeconfig"
        definition:
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: run-nfs-client-provisioner
          subjects:
            - kind: ServiceAccount
              name: nfs-client-provisioner
              namespace: "{{ storage_nfs_target_namespace }}"
          roleRef:
            kind: ClusterRole
            name: nfs-client-provisioner-runner
            apiGroup: rbac.authorization.k8s.io

    - name: Create Role leader-locking-nfs-client-provisioner
      tags: nfsprov
      k8s:
        state: present
        kubeconfig: "{{ openshift_install_dir }}/auth/kubeconfig"
        definition:
          kind: Role
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: leader-locking-nfs-client-provisioner
            namespace: "{{ storage_nfs_target_namespace }}"
          rules:
            - apiGroups: [""]
              resources: ["endpoints"]
              verbs: ["get", "list", "watch", "create", "update", "patch"]

    - name: Create RoleBinding leader-locking-nfs-client-provisioner <-> nfs-client-provisioner
      tags: nfsprov
      k8s:
        state: present
        kubeconfig: "{{ openshift_install_dir }}/auth/kubeconfig"
        definition:
          kind: RoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: leader-locking-nfs-client-provisioner
            namespace: "{{ storage_nfs_target_namespace }}"
          subjects:
            - kind: ServiceAccount
              name: nfs-client-provisioner
          roleRef:
            kind: Role
            name: leader-locking-nfs-client-provisioner
            apiGroup: rbac.authorization.k8s.io

    - name: Add SCC hostmount-anyuid to nfs-client-provisioner
      tags: nfsprov
      command: "/root/bin/oc adm policy add-scc-to-user hostmount-anyuid -n {{ storage_nfs_target_namespace }} -z nfs-client-provisioner --config {{ openshift_install_dir }}/auth/kubeconfig"

    - name: Deploy nfs-provisioner
      tags: nfsprov
      k8s:
        state: present
        kubeconfig: "{{ openshift_install_dir }}/auth/kubeconfig"
        definition:
          kind: Deployment
          apiVersion: extensions/v1beta1
          metadata:
            name: nfs-client-provisioner
            namespace: "{{ storage_nfs_target_namespace }}"
          spec:
            replicas: 1
            strategy:
              type: Recreate
            template:
              metadata:
                labels:
                  app: nfs-client-provisioner
              spec:
                serviceAccountName: nfs-client-provisioner
                containers:
                  - name: nfs-client-provisioner
                    image: quay.io/external_storage/nfs-client-provisioner:latest
                    volumeMounts:
                      - name: nfs-client-root
                        mountPath: /persistentvolumes
                    env:
                      - name: PROVISIONER_NAME
                        value: redhat-emea-ssa-team/nfs-client-provisioner
                      - name: NFS_SERVER
                        value: "172.16.10.5"
                      - name: NFS_PATH
                        value: "/data/nfs/ocp/user-pvs"
                volumes:
                  - name: nfs-client-root
                    nfs:
                      server: "172.16.10.5"
                      path: "/data/nfs/ocp/user-pvs"

    - name: Storage Class
      tags: nfsprov
      k8s:
        state: present
        kubeconfig: "{{ openshift_install_dir }}/auth/kubeconfig"
        definition:
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: managed-nfs-storage
            annotations:
              storageclass.kubernetes.io/is-default-class: "true"
          provisioner: redhat-emea-ssa-team/nfs-client-provisioner
          parameters:
            archiveOnDelete: "false"


# ------------------------------------------------------------------------------
# Add Red Hat Internal CA to trust chain
# (https://docs.openshift.com/container-platform/4.2/networking/configuring-a-custom-pki.html#nw-proxy-configure-object_configuring-a-custom-pki)
# The CA Chain is in user-ca-bundle ConfigMap, thanks to install
# config "additionalTrustBundle" (see there). Thus, wee need only
# to add it to the Cluster Proxy Config
# ------------------------------------------------------------------------------
    - name: Add Red Hat Internal CA to trust chain
      tags: pvs
      k8s:
        state: present
        kubeconfig: "/root/ocp4install/auth/kubeconfig"
        merge_type: merge
        definition:
          apiVersion: config.openshift.io/v1
          kind: Proxy
          metadata:
            name: cluster
          spec:
            trustedCA:
              name: "user-ca-bundle"
